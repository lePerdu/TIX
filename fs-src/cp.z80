;
; cp.z80
;

.nolist
#include "tix.inc"
#include "fcntl.inc"
#include "unistd.inc"
.list

.org $0000
.db "TIXE"
.dw $100
.dw $40
.dw text
.dw text_end - text
.dw data
.dw data_end - data

text:
tixe_sec_start("text")

    ; int main(int argc, char *argv[])
    ; Frame pointer
    ld ix, 0
    add ix, sp
argc .equ 2
argv .equ 4

    ld c, (ix + argc)
    ld b, (ix + argc+1)
    dec bc

    ; Need 2 arguments
    ld hl, 2
    or a
    sbc hl, bc
    jr nz, fail

    ; There are n/2 iterations for n files
    srl b \ rr c

    ld l, (ix + argv)
    ld h, (ix + argv+1)
    inc hl \ inc hl
rm_files:
    ; (de) = current name
    ld e, (hl)
    inc hl
    ld d, (hl)
    inc hl

    ; (bc) = new name
    push bc
        ld c, (hl)
        inc hl
        ld b, (hl)
        inc hl
        push hl
            ld h, b \ ld l, c
            syscall rename_
            jr nc, _
            lld iy, error_str
            ld bc, error_str_len
            ld a, STDERR_FILENO
            syscall write_

        pop iy \ push iy
            ; Get the old name again to print it out
            ld l, (iy - 4)
            ld h, (iy - 3)
            lcall strlen
            push hl \ pop iy
            ld a, STDERR_FILENO
            syscall write_

            lld iy, to_str
            ld bc, to_str_len
            ld a, STDERR_FILENO
            syscall write_

        pop iy \ push iy
            ; Get the new name again to print it out
            ld l, (iy - 2)
            ld h, (iy - 1)
            lcall strlen
            push hl \ pop iy
            ld a, STDERR_FILENO
            syscall write_

            lld iy, err_end_str
            ld bc, err_end_str_len
            syscall write_
_:
        pop hl
    pop bc

    dec bc
    ld a, b
    or c
    jr nz, rm_files

done:
    ld hl, 0
    ret

fail:
    ld hl, -1
    syscall exit_

#include "fs-src/string.z80"

tixe_sec_end()
text_end:

data:
tixe_sec_start("data")

error_str:
    .db "Could not rename '"
error_str_len .equ $ - error_str

to_str:
    .db "' to '"
to_str_len .equ $ - to_str

err_end_str:
    .db "'\n"
err_end_str_len .equ $ - err_end_str

tixe_sec_end()
data_end:
