;
; cp.z80
;

.nolist
#include "tix.inc"
#include "fcntl.inc"
#include "unistd.inc"
.list

.org $0000
.db "TIXE"
.dw $100
.dw $40
.dw text
.dw text_end - text
.dw data
.dw data_end - data

text:
tixe_sec_start("text")

    ; int main(int argc, char *argv[])
    ; Frame pointer
    ld ix, 0
    add ix, sp
argc .equ 2
argv .equ 4

    ld c, (ix + argc)
    ld b, (ix + argc+1)
    dec bc

    ; Need 2 arguments
    ld hl, 2
    or a
    sbc hl, bc
    jr nz, fail

    ; There are n/2 iterations for n files
    srl b \ rr c

    ld l, (ix + argv)
    ld h, (ix + argv+1)
    inc hl \ inc hl
cp_files:
    ; (de) = current name
    ld e, (hl)
    inc hl
    ld d, (hl)
    inc hl

    push bc
        push hl

            ld hl, O_RDONLY
            syscall open_
            jr c, read_error

        pop hl
        ; Get destination file name
        ld e, (hl)
        inc hl
        ld d, (hl)
        inc hl
        push hl

            push af
                ld hl, O_WRONLY | O_CREAT | O_TRUNC
                ; TODO Create a way to get the mode of the source file
                ld bc, S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH
                syscall open_
            pop de ; d = read fd
            jr c, write_error
            ld e, a

copy_loop:
            lld iy, buf
            ld bc, BUF_SIZE
            ld a, d
            push de
                syscall read_
            pop de
            ld a, b
            or c
            jr z, copy_done

            lld iy, buf
            ld a, e
            push de
                syscall write_
            pop de
            jr copy_loop
copy_done:

            ld a, e
            push de
                syscall close_
            pop de
write_error:
            ld a, d
            syscall close_
read_error:
        pop hl
    pop bc

    dec bc
    ld a, b
    or c
    jr nz, cp_files

done:
    ld hl, 0
    ret

fail:
    ld hl, -1
    syscall exit_

tixe_sec_end()
text_end:

data:
tixe_sec_start("data")

error_str:
    .db "cannot copy file\n"
error_str_len .equ $ - error_str

; Buffer for copying files
BUF_SIZE .equ 128
buf:
    .fill BUF_SIZE

tixe_sec_end()
data_end:
