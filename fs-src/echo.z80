;
; echo.z80
;

.nolist
#include "tix.inc"
#include "unistd.inc"
.list

.org $0000
.db "TIXE"
.dw $400
.dw $100
.dw text
.dw text_end - text
.dw data
.dw data_end - data

text:
tixe_sec_start("text")

    ; int main(int argc, char *argv[]);
    ; Use a frame pointer to get the parameters
argc .equ 2
argv .equ 4
    ld ix, 0
    add ix, sp

    ld c, (ix + argc)
    ld b, (ix + argc+1)
    ld a, b
    or c
    jr nz, _
    ld hl, 0
    ret
_:

    ld l, (ix + argv)
    ld h, (ix + argv+1)

loop:
    push hl
        push bc
            ld a, (hl)
            inc hl
            ld h, (hl)
            ld l, a

            lcall strlen
            push hl \ pop iy
            ld a, STDOUT_FILENO
            syscall write_
        pop bc
        ; Decrement here to not print a space after the last arugment
        dec bc
        ld a, b
        or c
        jr z, loop_end
        push bc
            lld iy, space_char
            ld bc, 1
            ; ld a, STDOUT_FILENO
            syscall write_
        pop bc
    pop hl

    inc hl \ inc hl
    jr loop

loop_end:
    pop hl

    lld iy, nl_char
    ld bc, 1
    ld a, STDOUT_FILENO
    syscall write_

    ld hl, 0
    ret


strlen:
    ld bc, 0
    xor a
    cpir
    ; Technically, we should check if bc = 0 (from overflow), but that is
    ; impossible because there is at least 1 0 in the addres space from ld bc,
    ; 0.

    add hl, bc ; Reset hl

    ; Negate and decrement bc
    ld a, b
    cpl
    ld b, a
    ld a, c
    cpl
    ld c, a
    ; inc bc
    ; dec bc
    ret

tixe_sec_end()
text_end:

data:
tixe_sec_start("data")

space_char:
    .db " "

nl_char:
    .db "\n"

tixe_sec_end()
data_end:
