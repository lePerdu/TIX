;
; ls.z80
;

.nolist
#include "tix.inc"
#include "fcntl.inc"
#include "unistd.inc"
.list

.org $0000
.db "TIXE"
.dw $100
.dw $40
.dw text
.dw text_end - text
.dw data
.dw data_end - data

text:
tixe_sec_start("text")

    ; int main(int argc, char *argv[])
    ; Frame pointer
    ld ix, 0
    add ix, sp
argc .equ 2
argv .equ 4

    ld l, (ix + argc)
    ld h, (ix + argc+1)
    ld bc, 2
    sbc hl, bc
    jr c, ls_cwd
ls_argv_dir:
    ld l, (ix + argv)
    ld h, (ix + argv+1)
    inc hl \ inc hl
    ld e, (hl)
    inc hl
    ld d, (hl)
    jr _

ls_cwd:
    lld iy, cwd_buf
    syscall getwd_
    jr c, fail
    lld de, cwd_buf

_:
    syscall opendir_
    jr c, fail

loop:
    syscall readdir_
    jr c, done

    push hl
        ex de, hl
        ; dirent_name = 2
        inc hl \ inc hl
        lcall strlen
        push hl \ pop iy
        ld a, STDOUT_FILENO
        syscall write_

        lld iy, nl_char
        ld bc, 1
        ; ld a, STDOUT_FILENO
        syscall write_
    pop hl
    jr loop

done:
    syscall closedir_
    ld hl, 0
    ret

fail:
    ld hl, -1
    ret


strlen:
    ld bc, 0
    xor a
    cpir
    ; Technically, we should check if bc = 0 (from overflow), but that is
    ; impossible because there is at least 1 0 in the addres space from ld bc,
    ; 0.

    add hl, bc ; Reset hl

    ; Negate and decrement bc
    ld a, b
    cpl
    ld b, a
    ld a, c
    cpl
    ld c, a
    ; inc bc
    ; dec bc
    ret

tixe_sec_end()
text_end:

data:
tixe_sec_start("data")

nl_char:
    .db "\n"

cwd_buf:
    .fill PATH_MAX+1

tixe_sec_end()
data_end:
